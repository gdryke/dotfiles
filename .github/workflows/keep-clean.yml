# This workflow will run when an upkeep-clock issue is closed, and open up a new issue based on the closed issue if we have no upkeep-clock issues open.

name: Upkeep Clock
on:
  issues:
    types: [closed]

jobs:
  tick-the-clock:
    if: contains(github.event.issue.labels.*.name, 'upkeep-clock')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
      - uses: actions/checkout@v2
      - name: Create the next clock issue
        uses: actions/github-script@main
        with:
          debug: true
          script: |
              const fs = require('fs');

              const issueTypes = [
                "clean-up-ffs",
                "clean-up-dead-links",
                "reliability-bugs",
                "remove-old-component-versions"
                ];

              // check for any open upkeep-clock issues
              const openClockIssuesQuery = `query ($owner: String!, $name: String!) {
                repository(owner: $owner, name: $name) {
                  issues(labels: ["upkeep-clock"], last:1, states: [OPEN]) {
                    totalCount
                  }
                }
              }`;

              const clockIssuesVariables = {
                owner: context.repo.owner,
                name: context.repo.repo
              }
              const openClockIssuesResult = await github.graphql(openClockIssuesQuery, clockIssuesVariables)
              var openClockIssueCount = openClockIssuesResult.repository.issues.totalCount;
              console.log("Open issue count: " + openClockIssueCount);

              if (openClockIssueCount>0) {
                console.log("not processing this event, we only want to make a new upkeep clock issue when there are none left")
                return
              }

              // there are no outstanding upkeep clock issue, get details on the highest numbered one
              console.log("Getting closed issue details");
              const lastClosedClockQuery = `query ($owner: String!, $name: String!) {
                repository(owner: $owner, name: $name) {
                  issues(labels: ["upkeep-clock"], last:1, states: [CLOSED]) {
                    nodes {
                      number
                      labels(last: 10) {
                        edges {
                          node {
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }`;

              const lastClosedClockResult = await github.graphql(lastClosedClockQuery, clockIssuesVariables)
              var lastClosedClockIssue = lastClosedClockResult.repository.issues.nodes[0];
              console.log(lastClosedClockIssue.labels)
              console.log("Highest numbered closed clock issue: " + lastClosedClockIssue.number);
              var labelList = lastClosedClockIssue.labels.edges;

              // match the last closed to our issue types using the fixed label, which gets us the index of that match in our clock list
              console.log("Matching closed issue labels to issue types");
              var currentIndex = -1; // Match indexOf() failure
              for (const issueLabel of labelList)
              {
                var labelName = issueLabel.node.name;
                if (issueTypes.includes(labelName)) {
                 currentIndex = issueTypes.indexOf(labelName);
                 break;
                }
              }

              var index = (currentIndex + 1) % issueTypes.length;
              console.log("New issue type index: ", index);
              var whatIsNext = issueTypes[index];
              console.log("Next upkeep clock issue will be:  " + whatIsNext);

              // get file content for the next issue and create it!
              var filePath = "./.github/upkeep-clock/"+whatIsNext+".md";
              var rawIssueContent = "";
              await fs.readFile(filePath, (err, data) => {
                if (err) throw err;
                rawIssueContent = data;
              });
              var issueContent = rawIssueContent + "\r\n\r\n**Created by:** [The Upkeep Clock](https://github.com/github/actions-larger-runners/.github/workflows/upkeep-clock.yml)";

              const issue = await github.rest.issues.create({
                  ...context.repo,
                  title: `Upkeep Clock: ${whatIsNext}`,
                  body: issueContent,
                  labels: ["upkeep-clock", whatIsNext, "keep"]
              });
              console.log(`Successfully created the issue ${issue.data.html_url}`);
